`hardware constants:
`======================================================================================


`Mapper (bank switching)
`--------------------------------------------------------------------------------------
``the banking of the cartridge ROM into the slots of the Z80 address space is handled
  by the mapper chip. for standard SEGA mappers, writing to $FFFC configures the
  mapper and $FFFD/E/F sets the ROM bank number to page into the relevant memory slot.
  for more details, see http://www.smspower.org/Development/Mappers
``
RAM $FFFC {

.SMS_PAGE_CONTROL       AS BYTE BITS {
                        .BankShift x 2
                        .RAMBank
                        .RAM8000
                        .RAMC000
                        . x 2           `unused bits
                        .WriteProtect   
                        }
.SMS_PAGE_0             AS BYTE         `Page 0 ROM Bank
.SMS_PAGE_1             AS BYTE         `Page 1 ROM Bank
.SMS_PAGE_2             AS BYTE         `Page 2 ROM Bank

}

`VDP:
`--------------------------------------------------------------------------------------
``the Video Display Processor in the Master System handles the graphics and sprites
  stored in video RAM ("VRAM"), composites the display and outputs it to the display
``

RAM {
       
.VDP_SCANLINE           AS BYTE $7E     `read current vertical scanline
.VDP_DATA               AS BYTE $BE     `graphics data port
.VDP_CONTROL            AS BYTE $BF     `graphics control port

.VDP_SCREENNAMETABLE    AS WORD $3800

}	

``VDP registers are written to by sending first the data byte, and then the 4-bit
  register number with bit 7 set. for more details, see
  http://www.smspower.org/Development/VDPRegisters
``
DEF _VDP_REGISTER_WRITE	%10000000
DEF _VDP_REGISTER_0     _VDP_REGISTER_WRITE | 0
DEF _VDP_REGISTER_1	_VDP_REGISTER_WRITE | 1
DEF _VDP_REGISTER_2	_VDP_REGISTER_WRITE | 2
DEF _VDP_REGISTER_5     _VDP_REGISTER_WRITE | 5
DEF _VDP_REGISTER_6	_VDP_REGISTER_WRITE | 6
DEF _VDP_REGISTER_7     _VDP_REGISTER_WRITE | 7
DEF _VDP_REGISTER_8	_VDP_REGISTER_WRITE | 8
DEF _VDP_REGISTER_9	_VDP_REGISTER_WRITE | 9
DEF _VDP_REGISTER_10	_VDP_REGISTER_WRITE | 10

`--------------------------------------------------------------------------------------

RAM {
.SMS_SOUND_PORT         AS BYTE $7F	`write-only port to send data to sound chip
}

RAM {
.SMS_JOYPAD_1		AS BYTE $DC
.SMS_JOYPAD_2		AS BYTE $DD
}