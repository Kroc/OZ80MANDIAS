PROC	:mob_Sonic                              SECTION ::mobs                  `$48C8
        `==============================================================================
PARAMS  IX;mob          HELP ""Address of the current mob being processed
        IY;vars         HELP ""Address of the common variables (used throughout)
{	
	res	1,[iy+#vars.unknown0]
	
	bit	7,[ix+#mob.flags]
	call	nz,._4e88
	
	`flag to update the Sonic sprite frame
	set	7,[iy+#vars.timeLightningFlags]
	
	bit	0,[iy+#vars.scrollRingFlags]
	jp	nz,._543c
	
	ld	a,[$.SONIC.unknown16]
	and	a
	call	nz,._4ff0
	
	res	5,[ix+#mob.flags]
	
	bit	6,[iy+#vars.flags6]
	call	nz,._510a
	
	ld	a,[$.D28C]
	and	a
	call	nz,._568f
	
	bit	0,[iy+#vars.timeLightningFlags]
	call	nz,._5100
	
	bit	0,[iy+#vars.unknown0]
	call	nz,._4ff5
	
	bit	4,[ix+#mob.flags]
	call	nz,._5009
	
	ld	a,[$.D28B]
	and	a
	call	nz,._5285
	
	ld	a,[$.D28A]
	and	a
	jp	nz,._5117
	
	bit	6,[iy+#vars.unknown0]
	jp	nz,._5193
	
	bit	7,[iy+#vars.unknown0]
	call	nz,._529c
	
	bit	4,[ix+#mob.flags]
	jp	z,._1
	
	ld	hl,._4ddd
	ld	de,$.TEMP1
	ld	bc,$0009
	ldir	
	
	ld	hl,$0100
	ld	[$.D240],hl
	ld	hl,$fd80
	ld	[$.D242],hl
	ld	hl,$0010
	ld	[$.D244],hl
	jp	._5
	
._1	ld	a,[ix+#mob.unknown15]
	and	a
	jr	nz,._4
	
	bit	0,[iy+#vars.timeLightningFlags]
	jr	nz,._3
	
._2	ld	hl,._4dcb
	ld	de,$.TEMP1
	ld	bc,$0009
	ldir	
	
	ld	hl,$0300
	ld	[$.D240],hl
	ld	hl,$fc80
	ld	[$.D242],hl
	ld	hl,$0038
	ld	[$.D244],hl
	ld	hl,[$DC0C]
	ld	[$DC0A],hl
	jp	._5
	
._3	bit	7,[ix+#mob.flags]
	jr	nz,._2
	
	ld	hl,._4dd4
	ld	de,$.TEMP1
	ld	bc,$0009
	ldir	
	
	ld	hl,$0c00
	ld	[$.D240],hl
	ld	hl,$fc80
	ld	[$.D242],hl
	ld	hl,$0038
	ld	[$.D244],hl
	ld	hl,[$DC0C]
	ld	[$DC0A],hl
	jp	._5
	
._4	ld	hl,._4de6
	ld	de,$.TEMP1
	ld	bc,$0009
	ldir	
	ld	hl,$0600
	ld	[$.D240],hl
	ld	hl,$fc80
	ld	[$.D242],hl
	ld	hl,$0038
	ld	[$.D244],hl
	ld	hl,[$DC0C]
	inc	hl
	ld	[$DC0A],hl
	ld	a,[$.FRAMECOUNT]
	and	$03
	call	z,._4fec
	
._5	bit	1,[iy+#vars.joypad]	        `joypad up?
	call	z,._50c1
	
	bit	1,[iy+#vars.joypad]	        `joypad not up?
	call	nz,._50e3
	
        `handle collision with tile underneath Sonic:
        `------------------------------------------------------------------------------
        
	ld	A;bank          15
	ld	[$.SMS.SLOT2]   A;bank
	ld	[$.SLOT2]       A;bank
        
        `$3F9ED = 
        `0010, 00C4, 0154, 01F4, 02B4, 0374, 044C, 04CC
        `  (180) (144) (160) (192) (192) (216) (128)
        
        `locate which block is underneath Sonic?
	ld	BC;xoff         12
	ld	DE;yoff         16
	call	:getFloorLayoutRAMAddressForMob
	
        `get the block index from the Floor Layout address returned
	ld	E;block         [HL;addr]
	ld	D;zero          0
        
        `get the solidity index for the current level
	ld	A;solidity      [$.LEVEL_SOLIDITY]
        `double it to look it up in a list of pointers (2 bytes each)
	add	A;solidity      A;solidity
        `transfer it into HL so as to add it to the pointer table address
	ld	L;solidity      A;solidity
	ld	H;solidity      D;zero
        `access the table of data offsets at $3F9ED (bank 15)
	ld	BC;table        $B9ED           `=$3F9ED
        `lookup the solidity index in the table of offsets
	add	HL;solidity     BC;table
        `read the 2-byte offset value into HL
	ld	A;offset        [HL;table]
	inc	HL;table
	ld	H;offset        [HL;table]
	ld	L;offset        A;offset
        `make an absolute address: $3F9ED + offset for solidity + block index
	add	HL;offset       DE;block
	add	HL;offset       BC;table
        `read the byte of data for the particular block index
	ld	A;data          [HL;data]
        `if it's higher than the number of solidity types, skip ahead
	cp	$1C                             `=number of entries in ._58e5
	jr	nc,._6
	
        `double the data byte read
         `and transfer to HL for 16-bit use
        add	a;data,a;data
	ld	l,a;data
	ld	h,d;zero
	ld	de,._58e5
	add	hl,de
        `load HL with the address in the lookup table
	ld	a,[hl]
	inc	hl
	ld	h,[hl]
	ld	l,a
	
        `load DE with the callback address
        ld	de,._6
	
        ld	a;bank,2
	ld	[$.SMS.SLOT2],a;bank
	ld	[$.SLOT2],a;bank
	
        `keep a copy of the callback address
         `and jump to the specific solidity routine for the tile under Sonic
        push	de
	jp	[hl]
	
        `------------------------------------------------------------------------------
        
._6	ld	hl,[$.SONIC.Y]
	ld	de,$0024
	add	hl,de
	ex	de,hl
	ld	hl,[$.LEVEL_BOTTOM]
	ld	bc,$00c0
	add	hl,bc
	xor	a;zero                          `set A to zero, clearing the carry flag
	sbc	hl,de
	call	c,:killPlayer
	ld	hl,$0000
	ld	a,[iy+#vars.joypad]
	cp	$ff
	jr	nz,._7
        
        `is player moving left or right?
	ld	de,[$.SONIC.Xspeed]             `get the horizontal speed
	ld	a,e                             `shift E into A for next instruction
	or	d                               `combine E & D
	jr	nz,._7                          `if it's not zero, skip
	
        ld	a,[$.SONIC.flags]
	rlca	
	jr	nc,._7
	ld	hl,[$.D299]
	inc	hl
        
._7	ld	[$.D299],hl
	bit	7,[iy+#vars.flags6]
	call	nz,._50e8
	ld	[ix+#mob.unknown14],$05
	ld	hl,[$.D299]
	ld	de,$0168
	and	a
	sbc	hl,de
	call	nc,._5105
	ld	a,[iy+#vars.joypad]
	cp	$fe
	call	z,._4edd
	bit	0,[iy+#vars.joypad]
	call	nz,._4fd3
	bit	0,[ix+#mob.flags]
	jp	nz,._532e
	ld	a,[ix+#mob.height]
	cp	$20
	jr	z,._8
	ld	hl,[$.SONIC.Y]
	ld	de,$fff8
	add	hl,de
	ld	[$.SONIC.Y],hl
._8	ld	[ix+#mob.width],$18
	ld	[ix+#mob.height],$20
	ld	hl,[$.SONIC.Xspeed]
	ld	b,[ix+#mob.Xdirection]
	ld	c,$00
	ld	e,c
	ld	d,c
	bit	3,[iy+#vars.joypad]
	jp	z,._4f01
	bit	2,[iy+#vars.joypad]
	jp	z,._4f5c
	ld	a,h
	or	l
	or	b
	jr	z,._4b1b
	ld	[ix+#mob.unknown14],$01
	bit	7,b
	jr	nz,._9
	ld	de,[$.TEMP4]
	ld	a,e
	cpl	
	ld	e,a
	ld	a,d
	cpl	
	ld	d,a
	inc	de
	ld	c,$ff
	push	hl
	push	de
	ld	de,[$.D240]
	xor	a;zero
	sbc	hl,de
	pop	de
	pop	hl
	jr	c,._4b1b
	ld	de,[$.TEMP1]
	ld	a,e
	cpl	
	ld	e,a
	ld	a,d
	cpl	
	ld	d,a
	inc	de
	ld	c,$ff
	ld	a,[$.D216]
	ld	[ix+#mob.unknown14],a
	jp	._4b1b
	
._9	ld	de,[$.TEMP4]
	ld	c,$00
	push	hl
	push	de
	ld	a,l
	cpl	
	ld	l,a
	ld	a,h
	cpl	
	ld	h,a
	inc	hl
	ld	de,[$.D240]
	xor	a;zero
	sbc	hl,de
	pop	de
	pop	hl
	jr	c,._4b1b
	ld	de,[$.TEMP1]
	ld	a,[$.D216]
	ld	[ix+#mob.unknown14],a
._4b1b
	ld	a,b
	and	a
	jp	m,._10
	add	hl,de
	adc	a,c
	ld	c,a
	jp	p,._11
	ld	a,[$.SONIC.Xspeed]
	or	[ix+#mob.Xspeed.hi]
	or	[ix+#mob.Xdirection]
	jr	z,._11
	ld	c,$00
	ld	l,c
	ld	h,c
	jp	._11
	
._10	add	hl,de
	adc	a,c
	ld	c,a
	jp	m,._11
	ld	c,$00
	ld	l,c
	ld	h,c
._11	ld	a,c
	ld	[$.SONIC.Xspeed],hl
	ld	[$.SONIC.Xdirection],a
._4b49
	ld	hl,[$.SONIC.Yspeed]
	ld	b,[ix+#mob.Ydirection]
	ld	c,$00
	ld	e,c
	ld	d,c
	bit	7,[ix+#mob.flags]
	call	nz,._50af
	bit	0,[ix+#mob.flags]
	jp	nz,._5407
	ld	a,[$.D28E]
	and	a
	jr	nz,._12
	bit	7,[ix+#mob.flags]
	jr	z,._13
	bit	3,[ix+#mob.flags]
	jr	nz,._16
	bit	5,[iy+#vars.joypad]
	jr	z,._13
._12	bit	5,[iy+#vars.joypad]
	jr	nz,._14
._4b7f
	ld	a,[$.D28E]
	and	a
	call	z,._509d
	ld	hl,[$.D242]
	ld	b,$ff
	ld	c,$00
	ld	e,c
	ld	d,c
	ld	a,[$.D28E]
	dec	a
	ld	[$.D28E],a
	set	2,[ix+#mob.flags]
	jp	._17
	
._13	res	3,[ix+#mob.flags]
	jp	._15
	
._14	set	3,[ix+#mob.flags]
._15	xor	a;zero
	ld	[$.D28E],a;zero
._4bac
	bit	7,h
	jr	nz,._16
	ld	a,[$.TEMP7]
	cp	h
	jr	z,._17
	jr	c,._17
._16	ld	de,[$.D244]
	ld	c,$00
	
._17	bit	0,[iy+#vars.flags6]
	jr	z,._18
	
	push	hl
	ld	a,e
	cpl	
	ld	e,a
	ld	a,d
	cpl	
	ld	d,a
	ld	a,c
	cpl	
	ld	hl,$0001
	add	hl,de
	ex	de,hl
	adc	a,$00
	ld	c,a
	pop	hl
._18	add	hl,de
	ld	a,b
	adc	a,c
	ld	[$.SONIC.Yspeed],hl
	ld	[$.SONIC.Ydirection],a
	push	hl
	ld	a,e
	cpl	
	ld	l,a
	ld	a,d
	cpl	
	ld	h,a
	ld	a,c
	cpl	
	ld	de,$0001
	add	hl,de
	adc	a,$00
	ld	[$.D2E6],hl
	ld	[$.D2E8],a
	pop	hl
	bit	2,[ix+#mob.flags]
	call	nz,._5280
	ld	a,h
	and	a
	jp	p,._19
	ld	a,h
	cpl	
	ld	h,a
	ld	a,l
	cpl	
	ld	l,a
	inc	hl
._19	ld	de,$0100
	ex	de,hl
	and	a
	sbc	hl,de
	jr	nc,._21
	ld	a,[$.SONIC.flags]
	and	$85
	jr	nz,._21
	bit	7,[ix+#mob.Ydirection]
	jr	z,._20
	ld	[ix+#mob.unknown14],$13
	jr	._21
._20	ld	[ix+#mob.unknown14],$01
._21	ld	bc,$000c
	ld	de,$0008
	call	:getFloorLayoutRAMAddressForMob
	ld	a,[hl]
	and	$7f
	cp	$79
	call	nc,._4def
._4c39
	ld	a,[$.D28C]
	and	a
	call	nz,._51b3
	bit	6,[iy+#vars.flags6]
	call	nz,._51bc
	bit	2,[iy+#vars.unknown0]
	call	nz,._51dd
	ld	a,[$.SONIC.unknown14]
	cp	$0a
	call	z,._51f3
	ld	l,[ix+#mob.unknown14]
	ld	c,l
	ld	h,$00
	add	hl,hl
	ld	de,._5965
	add	hl,de
	ld	e,[hl]
	inc	hl
	ld	d,[hl]
	ld	[$.SONIC.unknown11],de
	ld	a,[$.D2DF]
	sub	c
	call	nz,._521f
	ld	a,[$.SONIC.unknown13]
	
._22	ld	h,$00
	ld	l,a
	add	hl,de
	ld	a,[hl]
	and	a
	jp	p,._23
	inc	hl
	ld	a,[hl]
	ld	[$.SONIC.unknown13],a
	jp	._22
	
._23	ld	d,a
	ld	bc,:sound_update
	bit	1,[ix+#mob.flags]
	jr	z,._24
	ld	bc,:_7000                       `immediate $7000 or label?
._24	bit	5,[iy+#vars.flags6]
	call	nz,._5206
	ld	a,[$.D302]
	and	a
	call	nz,._4e48
	ld	a,d
	rrca	
	rrca	
	rrca	
	ld	e,a
	and	$e0
	ld	l,a
	ld	a,e
	and	$1f
	add	a,d
	ld	h,a
	add	hl,bc
	ld	[$.SONIC_CURRENT_FRAME],hl
	ld	hl,._591d
	
	bit	0,[iy+#vars.flags6]
	call	nz,._520f
	
	ld	a,[$.SONIC.unknown14]
	cp	$13
	call	z,._5213
	ld	a,[$.D302]
	and	a
	call	nz,._4e4d
	ld	[$.SONIC.spriteLayout],hl
	ld	c,$10
	ld	a,[$.SONIC.Xspeed.hi]
	and	a
	jp	p,._25
	neg	
	ld	c,$f0
._25	cp	$10
	jr	c,._26
	ld	a,c
	ld	[$.SONIC.Xspeed.hi],a
._26	ld	c,$10
	ld	a,[$.SONIC.Yspeed.hi]
	and	a
	jp	p,._27
	neg	
	ld	c,$f0
._27	cp	$10
	jr	c,._28
	ld	a,c
	ld	[$.SONIC.Yspeed.hi],a
._28	ld	de,[$.SONIC.Y]
	ld	hl,$0010
	and	a
	sbc	hl,de
	jr	c,._29
	add	hl,de
	ld	[$.SONIC.Y],hl
._29	bit	7,[iy+#vars.flags6]
	call	nz,._5224
	bit	0,[iy+#vars.unknown0]
	call	nz,._4e8d
	ld	a,[$.D2E1]
	and	a
	call	nz,._5231
	ld	a,[$.D321]
	and	a
	call	nz,._4e51
	bit	1,[iy+#vars.flags6]
	jr	nz,._31
	ld	hl,[$.LEVEL_LEFT]
	ld	bc,$0008
	add	hl,bc
	ex	de,hl
	ld	hl,[$.SONIC.X]
	and	a
	sbc	hl,de
	jr	nc,._30
	ld	[$.SONIC.X],de
	ld	a,[$.SONIC.Xdirection]
	and	a
	jp	p,._31
        
	xor	a;zero
	ld	[$.SONIC.Xspeed.lo],a;zero
	ld	[$.SONIC.Xspeed.hi],a;zero
	ld	[$.SONIC.Xdirection],a;zero
	jp	._31
	
._30	ld	hl,[$.LEVEL_RIGHT]
	ld	de,$00f8		        `248 -- screen width less 8?
	add	hl,de
	
	ex	de,hl
	ld	hl,[$.SONIC.X]
	ld	c,$18
	add	hl,bc
	and	a
	sbc	hl,de
	jr	c,._31
	ex	de,hl
	scf	
	sbc	hl,bc
	ld	[$.SONIC.X],hl
	ld	a,[$.SONIC.Xdirection]
	and	a
	jp	m,._31
	ld	hl,[$.SONIC.Xspeed.hi]
	or	h
	or	l
	jr	z,._31
        
	xor	a;zero			        `set A to 0
	ld	[$.SONIC.Xspeed.lo],a;zero
	ld	[$.SONIC.Xspeed.hi],a;zero
	ld	[$.SONIC.Xdirection],a;zero
	
._31	ld	a,[$.SONIC.flags]
	ld	[$.D2B9],a
	ld	a,[$.SONIC.unknown14]
	ld	[$.D2DF],a
	ld	d,$01
	ld	c,$30
	cp	$01
	jr	z,._32
	ld	d,$06
	ld	c,$50
	cp	$09
	jr	z,._32
	inc	[ix+#mob.unknown13]
	ret
	
._32	ld	a,[$.D2E0]
	ld	b,a
	ld	hl,[$.SONIC.Xspeed]
	bit	7,h
	jr	z,._33
	ld	a,l
	cpl	
	ld	l,a
	ld	a,h
	cpl	
	ld	h,a
	inc	hl
._33	srl	h
	rr	l
	ld	a,l
	add	a,b
	ld	[$.D2E0],a
	ld	a,h
	adc	a,d
	adc	a,[ix+#mob.unknown13]
	ld	[$.SONIC.unknown13],a
	cp	c
	ret	c
	sub	c
	ld	[$.SONIC.unknown13],a
	ret	
        
        `--------------------------------------------------------------------[$4DCB]---

._4dcb  BYTE    $10, $00, $30, $00, $08, $00, $00, $08, $02
._4dd4  BYTE    $10, $00, $30, $00, $02, $00, $00, $08, $02
._4ddd  BYTE    $04, $00, $0c, $00, $02, $00, $00, $02, $01
._4de6  BYTE    $10, $00, $30, $00, $08, $00, $00, $08, $02

        `--------------------------------------------------------------------[$4DEF]---

._4def	ex	de,hl
	
	ld	hl,[$.SONIC.Y]
	ld	bc,[$.CAMERA_Y]
	and	a
	sbc	hl,bc
	ret	c
	
	ld	bc,$0010
	and	a
	sbc	hl,bc
	ret	c
	
	ld	hl,[$.SONIC.X]
	ld	bc,$000C
	add	hl,bc
	ld	a,[de]
	ld	c,a
	ld	a,l
	rrca	
	rrca	
	rrca	
	rrca	
	and	$01
	inc	a
	ld	b,a
	ld	a,c
	and	b
	ret	z
	ld	a,l
	and	$F0
	ld	l,a
	ld	[$.D2AB],hl
	ld	[$.D31D],hl
	ld	a,c
	xor	b
	ld	[de],a
	ld	hl,[$.SONIC.Y]
	ld	bc,$0008
	add	hl,bc
	ld	a,l
	and	$E0
	add	a,$08
	ld	l,a
	ld	[$.D2AD],hl
	ld	[$.D31F],hl
	ld	a,$06
	ld	[$.D321],a
	ld	hl,._595d
	ld	[$.D2AF],hl
        
        `add one ring to the ring count
	ld	a,$01
	call	:increaseRings
        
	ret

        `--------------------------------------------------------------------[$4E48]---

._4e48  ld	d,a
	ld	bc,:_7000                       `immediate $7000 or label?
	ret

        `--------------------------------------------------------------------[$4E4D]---

._4e4d  ld	hl,$0000
	ret

        `--------------------------------------------------------------------[$4E51]---

._4e51	dec	a
	ld	[$.D321],a
	ld	hl,[$.D31D]
	ld	[$.TEMP1],hl
	ld	hl,[$.D31F]
	ld	[$.TEMP3],hl
	ld	hl,$0000
	ld	[$.TEMP4],hl
	ld	hl,$fffe
	ld	[$.TEMP6],hl
	cp	$03
	jr	c,._34
	ld	a,$b2
	call	:_3581
	ld	hl,$0008
	ld	[$.TEMP4],hl
	ld	hl,$0002
	ld	[$.TEMP6],hl
._34	ld	a,$5a
	call	:_3581
	ret

        `--------------------------------------------------------------------[$4E88]---

._4e88  set	1,[iy+#vars.unknown0]
	ret

        `--------------------------------------------------------------------[$4E8D]---

._4e8d  ld	hl,[$.SONIC.X]
	ld	[$.TEMP1],hl
	ld	hl,[$.SONIC.Y]
	ld	[$.TEMP3],hl
	ld	hl,$.D2F3
	ld	a,[$.FRAMECOUNT]
	rrca	
	rrca	
	jr	nc,._35
	ld	hl,$.D2F7
._35	ld	de,$.TEMP4
	ldi	
	ldi	
	ldi	
	ldi	
	rrca	
	ld	a,$94
	jr	nc,._36
	ld	a,$96
._36	call	:_3581
	ld	a,[$.FRAMECOUNT]
	ld	c,a
	and	$07
	ret	nz
	ld	b,$02
	ld	hl,$.D2F3
	bit	3,c
	jr	z,._37
	ld	hl,$.D2F7
._37	push    hl
	call	:_LABEL_625_57
	pop	hl
	and	$0f
	ld	[hl],a
	inc	hl
	ld	[hl],$00
	inc	hl
	djnz	._37
	ret

        `--------------------------------------------------------------------[$4EDD]---
        
._4edd  ld	hl,[$.SONIC.Xspeed]
	ld	a,h
	or	l
	ret	nz
	ld	a,[$.SONIC.flags]
	rlca	
	ret	nc
	ld	[ix+#mob.unknown14],$0c
	ld	de,[$.D2B7]
	bit	7,d
	jr	nz,._38
	ld	hl,$002c
	and	a
	sbc	hl,de
	ret	c
._38	inc	de
	ld	[$.D2B7],de
	ret

        `--------------------------------------------------------------------[$4F01]---
        
._4f01  res	1,[ix+#mob.flags]
	bit	7,b
	jr	nz,._39
	ld	de,[$.TEMP1]
	ld	c,$00
	ld	[ix+#mob.unknown14],$01
	push	hl
	exx	
	pop	hl
	ld	de,[$.D240]
	xor	a;zero
	sbc	hl,de
	exx	
	jp	c,._4b1b
	ld	b,a
	ld	e,a
	ld	d,a
	ld	c,a
	ld	hl,[$.D240]
	ld	a,[$.D216]
	ld	[ix+#mob.unknown14],a
	jp	._4b1b
        
        `------------------------------------------------------------------------------
	
._39	set	1,[ix+#mob.flags]
	ld	[ix+#mob.unknown14],$0a
	push	hl
	ld	a,l
	cpl	
	ld	l,a
	ld	a,h
	cpl	
	ld	h,a
	inc	hl
	ld	de,$0100
	and	a
	sbc	hl,de
	pop	hl
	ld	de,[$.TEMP3]
	ld	c,$00
	jp	nc,._4b1b
	res	1,[ix+#mob.flags]
	ld	[ix+#mob.unknown14],$01
	jp	._4b1b
._4f5c
	set	1,[ix+#mob.flags]
	ld	a,l
	or	h
	jr	z,._40
	bit	7,b
	jr	z,._4fa6
._40	ld	de,[$.TEMP1]
	ld	a,e
	cpl	
	ld	e,a
	ld	a,d
	cpl	
	ld	d,a
	inc	de
	ld	c,$ff
	ld	[ix+#mob.unknown14],$01
	push	hl
	exx	
	pop	hl
	ld	a,l
	cpl	
	ld	l,a
	ld	a,h
	cpl	
	ld	h,a
	inc	hl
	ld	de,[$.D240]
	xor	a;zero
	sbc	hl,de
	exx	
	jp	c,._4b1b
	ld	e,a
	ld	d,a
	ld	c,a
	ld	hl,[$.D240]
	ld	a,l
	cpl	
	ld	l,a
	ld	a,h
	cpl	
	ld	h,a
	inc	hl
	ld	b,$ff
	ld	a,[$.D216]
	ld	[ix+#mob.unknown14],a
	jp	._4b1b
._4fa6
	res	1,[ix+#mob.flags]
	ld	[ix+#mob.unknown14],$0a
	ld	de,[$.TEMP3]
	ld	a,e
	cpl	
	ld	e,a
	ld	a,d
	cpl	
	ld	d,a
	inc	de
	ld	c,$ff
	push	hl
	exx	
	pop	hl
	ld	bc,$0100
	and	a
	sbc	hl,bc
	exx	
	jp	nc,._4b1b
	set	1,[ix+#mob.flags]
	ld	[ix+#mob.unknown14],$01
	jp	._4b1b

        `--------------------------------------------------------------------[$4FD3]---
        
._4fd3  bit	0,[ix+#mob.flags]
	ret	nz
	ld	hl,[$.D2B7]
	ld	a,h
	or	l
	ret	z
	bit	7,h
	jr	z,._41
	inc	hl
	ld	[$.D2B7],hl
	ret
	
._41	dec	hl
	ld	[$.D2B7],hl
	ret

        `--------------------------------------------------------------------[$4FEC]---
        
._4fec  dec	[ix+#mob.unknown15]
	ret

        `--------------------------------------------------------------------[$4FF0]---

._4ff0	dec	a
	ld	[$.SONIC.unknown16],a
	ret

        `--------------------------------------------------------------------[$4FF5]---
        
._4ff5  ld	a,[$.FRAMECOUNT]
	and	$03
	ret	nz
	ld	hl,$.D28D
	dec	[hl]
	ret	nz
	res	0,[iy+#vars.unknown0]
	
	ld	a,[$.LEVEL_MUSIC]
	rst	:rst_playMusic
	
	ret

        `--------------------------------------------------------------------[$5009]---

._5009  ld	a,[$.LEVEL_SOLIDITY]
	cp	$03
	ret	nz
	ld	a,[$.CURRENT_LEVEL]
	cp	$0b
	ret	z
	ld	hl,[$.D29B]
	inc	hl
	ld	[$.D29B],hl
	ld	de,$0300
	and	a
	sbc	hl,de
	ret	c
	ld	a,$05
	sub	h
	jr	nc,._42
	res	5,[iy+#vars.flags6]
	res	6,[iy+#vars.flags6]
	res	0,[iy+#vars.unknown0]
	set	3,[iy+#vars.unknown0]
	set	0,[iy+#vars.scrollRingFlags]
	ld	a,$c0
	ld	[$.D287],a
	
	ld	a,#index_music_death
	rst	:rst_playMusic
	
	call	:_91eb
	call	:_91eb
	call	:_91eb
	call	:_91eb
	xor	a;zero
._42	ld	e,a
	add	a,a
	add	a,$80
	ld	[$.LAYOUT_BUFFER],a
	ld	a,$ff
	ld	[$.LAYOUT_BUFFER+1],a
	ld	d,$00
	ld	hl,._5097
	add	hl,de
	ld	a,[$.FRAMECOUNT]
	and	[hl]
	jr	nz,._43
	ld	a,$1a
	rst	:rst_playSFX
._43	ld	a,[$.FRAMECOUNT]
	rrca	
	ret	nc
	ld	hl,[$.SONIC.X]
	ld	de,[$.CAMERA_X]
	and	a
	sbc	hl,de
	ld	a,l
	add	a,$08
	ld	c,a
	ld	hl,[$.SONIC.Y]
	ld	de,[$.CAMERA_Y]
	and	a
	sbc	hl,de
	ld	a,l
	add	a,$ec
	ld	b,a
	ld	hl,$D03C
	ld	de,$.LAYOUT_BUFFER
	call	:layoutSpritesHorizontal
        
	ret

._5097  BYTE    $01, $07, $0f, $1f, $3f, $7f

        `--------------------------------------------------------------------[$509D]---
        
._509d  ld	a,$10
	ld	[$.D28E],a
	ld	a,$00
	rst	:rst_playSFX
	ret

        `--- UNUSED! (8 bytes) ----------------------------------------------[$50A6]---
        
	xor	a;zero
	ld	[$.SONIC.Xsubpixel],a;zero
	ld	[$.SONIC.X],de
	ret

        `--------------------------------------------------------------------[$50AF]---

._50af	exx	
	ld	hl,[$.SONIC.Y]
	ld	[$.D2D9],hl
	exx	
	bit	2,[ix+#mob.flags]
	ret	z
	res	2,[ix+#mob.flags]
	ret

        `--------------------------------------------------------------------[$50C1]---
        
._50c1  bit	2,[ix+#mob.flags]
	ret	nz
	bit	0,[ix+#mob.flags]
	ret	nz
	bit	7,[ix+#mob.flags]
	ret	z
	set	0,[ix+#mob.flags]
	ld	hl,[$.SONIC.Xspeed]
	ld	a,l
	or	h
	jr	z,._44
	ld	a,$06
	rst	:rst_playSFX
._44	set	2,[iy+#vars.timeLightningFlags]
	ret

        `--------------------------------------------------------------------[$50E3]---
        
._50e3  res	2,[iy+#vars.timeLightningFlags]
	ret

        `--------------------------------------------------------------------[$50E8]---
        
._50e8  ld	hl,[$.D2DC]
	ld	de,[$.SONIC.Y]
	and	a
	sbc	hl,de
	jp	c,._55a8
	ld	hl,$0000
	ld	[$.D29B],hl
	res	4,[ix+#mob.flags]
	ret

        `--------------------------------------------------------------------[$5100]---
        
._5100  set	2,[ix+#mob.flags]
	ret

        `--------------------------------------------------------------------[$5105]---
        
._5105  ld	[ix+#mob.unknown14],$0d
	ret

        `--------------------------------------------------------------------[$510A]---
        
._510a  ld	[iy+#vars.joypad],$ff
	ld	a,[$.SONIC.flags]
	and	$fa
	ld	[$.SONIC.flags],a
	ret

        `--------------------------------------------------------------------[$5117]---
        
._5117  dec	a
	ld	[$.D28A],a
	jr	z,._46
	cp	$14
	jr	c,._45
        
	xor	A;zero
	ld	L;zero          A;zero
	ld	H;zero          A;zero
	ld	[$.SONIC.Xspeed.lo] A;zero
	ld	[$.SONIC.Xspeed.hi] HL;zero
	ld	[$.SONIC.Yspeed.lo] A;zero
	ld	[$.SONIC.Yspeed.hi] HL;zero
        
	ld	[ix+#mob.unknown14],$0f
	jp	._4c39
	
._45	res	1,[ix+#mob.flags]
	ld	[ix+#mob.unknown14],$0e
	jp	._4c39
	
._46	ld	hl,[$.D2D5]
	ld	b,[hl]
	inc	hl
	ld	c,[hl]
	inc	hl
	ld	a,[hl]
	and	a
	jr	z,._49
	jp	m,._47
	ld	[$.D2D3],a
	set	4,[iy+#vars.flags6]
	jr	._48	
._47	set	2,[iy+#vars.unknown_0D]
._48	ld	a,$01
	ld	[$.D289],a
	ret
	
._49	ld	a,b
	ld	h,$00
	ld	b,$05
	
._50	add	a,a
	rl	h
	djnz	._50
	
	ld	l,a
	ld	de,$0008
	add	hl,de
	ld	[$.SONIC.X],hl
	ld	a,c
	ld	h,$00
	add	a,a
	rl	h
	add	a,a
	rl	h
	add	a,a
	rl	h
	add	a,a
	rl	h
	add	a,a
	rl	h
	ld	l,a
	ld	[$.SONIC.Y],hl
        
	xor	a;zero
	ld	[$.SONIC.Xsubpixel],a;zero
	ld	[$.SONIC.Ysubpixel],a;zero
	ret

        `--------------------------------------------------------------------[$5193]---
        
._5193  xor	a;zero			        `set A to 0
	ld	l;zero,a;zero
	ld	h;zero,a;zero
	ld	[$.SONIC.Yspeed],hl;zerp
	ld	[$.SONIC.Ydirection],a;zero     `set "not jumping"
	
        ld	[ix+#mob.unknown14],$16
	ld	a,[$.SONIC.unknown13]
	cp	$12
	jp	c,._4c39
	res	6,[iy+#vars.unknown0]
	set	2,[ix+#mob.flags]
	jp	._4c39

        `--------------------------------------------------------------------[$51B3]---

._51b3  dec	a
	ld	[$.D28C],a
	ld	[ix+#mob.unknown14],$11
	ret

        `--------------------------------------------------------------------[$51BC]---
        
._51bc  ld	[ix+#mob.width],$1c
	ld	[ix+#mob.unknown14],$10
	bit	7,[ix+#mob.Ydirection]
	ret	nz
	bit	7,[ix+#mob.flags]
	ret	z
	res	6,[iy+#vars.flags6]
        
	xor	a;zero
	ld	[$.SONIC.Xspeed.lo],a;zero
	ld	[$.SONIC.Xspeed.hi],a;zero
	ld	[$.SONIC.Xdirection],a;zero
	ret

        `--------------------------------------------------------------------[$51DD]---

._51dd  ld	a,[$.SONIC.flags]
	and	$fa
	ld	[$.SONIC.flags],a
	ld	[ix+#mob.unknown14],$14
	ld	hl,$.D2FB
	dec	[hl]
	ret	nz
	res	2,[iy+#vars.unknown0]
	ret

        `--------------------------------------------------------------------[$51F3]---

._51f3	ld	a,[$.SONIC.unknown16]
	and	a
	ret	nz
	bit	7,[ix+#mob.flags]
	ret	z
	ld	a,$03
	rst	:rst_playSFX
	ld	a,$3c
	ld	[$.SONIC.unknown16],a
	ret

        `--------------------------------------------------------------------[$5206]---
        
._5206  ld	a,[$.FRAMECOUNT]
	and	$01
	ret	nz
	ld	d,$18
	ret

        `--------------------------------------------------------------------[$520F]---
        
._520f  ld	hl,._592b
	ret

        `--------------------------------------------------------------------[$5213]---
        
._5213  ld	hl,._5939
	bit	1,[ix+#mob.flags]
	ret	z
	ld	hl,._594b
	ret

        `--------------------------------------------------------------------[$521F]---
        
._521f  ld	[ix+#mob.unknown13],$00
	ret

        `--------------------------------------------------------------------[$5224]---
        
._5224  bit	4,[ix+#mob.flags]
	ret	z
	ld	a,[$.FRAMECOUNT]
	and	a
	call	z,:_91eb
	ret

        `--------------------------------------------------------------------[$5231]---
        
._5231  dec	a
	ld	[$.D2E1],a
	cp	$06
	jr	c,._51
	cp	$0a
	ret	c
        
._51	ld	a;updates,[iy+#vars.spriteUpdateCount]
	ld	hl;addr,[$.SPRITETABLE_ADDR]    `get current sprite-table address
	push	af;updates                      `remember no. of sprite updates pending
	push	hl;addr                         `remember current sprite-table address
	ld	hl;addr,$.SPRITETABLE           `load the game's main sprite table
	ld	[$.SPRITETABLE_ADDR],hl;addr    `and set the pointer to that
        
	ld	de,[$.CAMERA_Y]
	ld	hl,[$.D2E4]
	and	a
	sbc	hl,de
	ex	de,hl
	ld	bc,[$.CAMERA_X]
	ld	hl,[$.D2E2]
	and	a
	sbc	hl,bc
	ld	bc,._526e		        `address of sprite layout
	call	:processSpriteLayout
	
	pop	hl
	pop	af
	
	ld	[$.SPRITETABLE_ADDR],hl
	ld	[iy+#vars.spriteUpdateCount],a
	ret
	
._526e	BYTE    $00, $02, $04, $06, $FF, $FF
	BYTE    $20, $22, $24, $26, $FF, $FF
	BYTE    $FF, $FF, $FF, $FF, $FF, $FF

        `--------------------------------------------------------------------[$5280]---
        
._5280  ld	[ix+#mob.unknown14],$09
	ret

        `--------------------------------------------------------------------[$5285]---
        
._5285  dec	a
	ld	[$.D28B],a
	ret	nz
	
	ld	a,[$.LEVEL_MUSIC]
	rst	:rst_playMusic
	
	ld	c,[iy+#vars.spriteUpdateCount]
	res	0,[iy+#vars.flags0]
	call	:waitForInterrupt
	ld	[iy+#vars.spriteUpdateCount],c
	ret

        `--------------------------------------------------------------------[$529C]---
        
._529c  ld	[iy+#vars.joypad],$fb
	ld	hl,[$.SONIC.X]
	ld	de,$1b60
	and	a
	sbc	hl,de
	ret	nc
	ld	[iy+#vars.joypad],$ff
	ld	hl,[$.SONIC.Xspeed]
	ld	a,l
	or	h
	ret	nz
	res	1,[ix+#mob.flags]
	pop	hl
	set	1,[ix+#mob.flags]
	ld	[ix+#mob.unknown14],$18
	ld	hl,$.D2FE
	bit	0,[iy+#vars.unknown_0D]
	jr	nz,._52
	ld	[hl],$50
	call	:findEmptyMob
	jp	c,._4c39
	push	ix
	push	hl
	pop	ix
	xor	a;zero			        `set A to 0
	ld	[ix+#mob.type],$54	        `all emeralds animation
	ld	[ix+#mob.unknown11],a;zero
	ld	[ix+#mob.flags],a;zero
	ld	[ix+#mob.Xsubpixel],a;zero
	ld	hl,[$.SONIC.X]
	ld	de,$0002
	add	hl,de
	ld	[ix+#mob.X.lo],l
	ld	[ix+#mob.X.hi],h
	ld	[ix+#mob.Ysubpixel],a;zero
	ld	hl,[$.SONIC.Y]
	ld	de,$000e
	add	hl,de
	ld	[ix+#mob.Y.lo],l
	ld	[ix+#mob.Y.hi],h
	pop	ix
	set	0,[iy+#vars.unknown_0D]
	jp	._4c39
	
._52	bit	1,[iy+#vars.unknown_0D]
	jr	nz,._53
	dec	[hl]
	jp	nz,._4c39
	set	1,[iy+#vars.unknown_0D]
	ld	[hl],$8c
._53	ld	[ix+#mob.unknown14],$17
	ld	a,[hl]
	and	a
	jr	z,._54
	dec	[hl]
	jp	._4c39
	
._54	ld	[ix+#mob.unknown14],$19
	jp	._4c39

        `--------------------------------------------------------------------[$532E]---
        
._532e  ld	a,[ix+#mob.height]
	cp	$18
	jr	z,._55
	ld	hl,[$.SONIC.Y]
	ld	de,$0008
	add	hl,de
	ld	[$.SONIC.Y],hl
._55	ld	[ix+#mob.width],$18
	ld	[ix+#mob.height],$18
	ld	hl,[$.SONIC.Xspeed]
	ld	b,[ix+#mob.Xdirection]
	ld	c,$00
	ld	e,c
	ld	d,c
	ld	a,h
	or	l
	or	b
	jp	z,._60
	ld	[ix+#mob.unknown14],$09
	bit	2,[iy+#vars.joypad]
	jr	nz,._57
	bit	1,[iy+#vars.joypad]
	jr	z,._57
	bit	7,[ix+#mob.flags]
	jp	z,._56
	bit	7,b
	jr	nz,._59
	res	0,[ix+#mob.flags]
	jp	._4fa6
	
._56	ld	de,$fff0
	ld	c,$ff
	jp	._4b1b
	
._57	bit	3,[iy+#vars.joypad]
	jr	nz,._59
	bit	1,[iy+#vars.joypad]
	jr	z,._59
	bit	7,[ix+#mob.flags]
	jp	z,._58
	bit	7,b
	jr	z,._59
	res	0,[ix+#mob.flags]
	jp	._4fa6
	
._58	ld	de,$0010
	ld	c,$00
	jp	._4b1b
	
._59	ld	de,$0004
	ld	c,$00
	ld	a,b
	and	a
	jp	m,._4b1b
	ld	de,$fffc
	ld	c,$ff
	jp	._4b1b
	
._60	bit	7,[ix+#mob.flags]
	jr	z,._62
	ld	[ix+#mob.unknown14],$07
	res	0,[ix+#mob.flags]
	ld	de,[$.D2B7]
	bit	7,d
	jr	z,._61
	ld	hl,$ffb0
	and	a
	sbc	hl,de
	jp	nc,._4b49
._61	dec	de
	ld	[$.D2B7],de
	jp	._4b49
	
._62	ld	[ix+#mob.unknown14],$09
	push	de
	push	hl
	bit	7,b
	jr	z,._63
	ld	a,l
	cpl	
	ld	l,a
	ld	a,h
	cpl	
	ld	h,a
	inc	hl
._63	ld	de,[$.D240]
	xor	a;zero
	sbc	hl,de
	pop	hl
	pop	de
	jp	c,._4b1b
	ld	c,a
	ld	e,c
	ld	d,c
	ld	[ix+#mob.unknown14],$09
	jp	._4b1b

        `--------------------------------------------------------------------[$5407]---
        
._5407  bit	7,[ix+#mob.flags]
	jr	z,._65
	bit	3,[ix+#mob.flags]
	jr	nz,._64
	bit	5,[iy+#vars.joypad]
	jr	z,._65
._64	bit	5,[iy+#vars.joypad]
	jr	nz,._66
	res	0,[ix+#mob.flags]
	ld	a,[$.SONIC.Xspeed]
	and	$f8
	ld	[$.SONIC.Xspeed],a
	jp	._4b7f
	
._65	res	3,[ix+#mob.flags]
	jp	._4bac
._66	set	3,[ix+#mob.flags]
	jp	._4bac

        `--------------------------------------------------------------------[$543C]---
        
._543c  set	5,[ix+#mob.flags]
	ld	a,[$.D287]
	cp	$60
	jr	z,._54aa
	ld	hl,[$.CAMERA_Y]
	ld	de,$00c0
	add	hl,de
	ld	de,[$.SONIC.Y]
	sbc	hl,de
	jr	nc,._67
	bit	2,[iy+#vars.flags6]
	jr	nz,._67
	ld	a,$01
	ld	[$.D283],a
	ld	hl,$.LIVES
	dec	[hl]
	set	2,[iy+#vars.flags6]
	jp	._54aa
	
._67	xor	a;zero
	ld	hl,$0080
	bit	3,[iy+#vars.unknown0]
	jr	nz,._71
	ld	de,[$.SONIC.Yspeed]
	bit	7,d
	jr	nz,._68
	ld	hl,$0600
	and	a
	sbc	hl,de
	jr	c,._72
._68	ex	de,hl
	ld	b,[ix+#mob.Ydirection]
	ld	a,h
	cp	$80
	jr	nc,._69
	cp	$08
	jr	nc,._70
._69	ld	de,$0030
	ld	c,$00
._70	add	hl,de
	ld	a,b
	adc	a,c
._71	ld	[$.SONIC.Yspeed],hl
	ld	[$.SONIC.Ydirection],a
._72	xor	a;zero
	ld	l;zero,a;zero
	ld	h;zero,a;zero
	ld	[$.SONIC.Xspeed],hl;zero
	ld	[$.SONIC.Xdirection],a;zero

._54aa
	ld	[ix+#mob.unknown14],$0b
	bit	3,[iy+#vars.unknown0]
	jp	z,._4c39
	ld	[ix+#mob.unknown14],$15
	jp	._4c39

        `====================================================================[$54BC]===
        `referenced by table at `_58e5` - index $00

INDEX   ._54bc

        `check if the player is underwater
        bit	7,[iy+#vars.flags6]             `underwater flag
	ret	nz                              `this solidity is not valid underwater
	
        res	4,[ix+#mob.flags]
	ret

        `====================================================================[$54C6]===
        `referenced by table at `_58e5` - index $01

INDEX   ._54c6
        
        bit	0,[iy+#vars.scrollRingFlags]    `is the player dead?
	jp	z,:_35fd                        `if not, leave here
	ret

        `====================================================================[$54CE]===
        `referenced by table at `_58e5` - index $02

INDEX   ._54ce
        ld	a,[ix+#mob.X.lo]
	add	a,$0c
	and	$1f
	cp	$1a
	ret	c
        
	ld	a,[$.SONIC.flags]
	rrca	
	jr	c,._73
	
        and	$02
	ret	z
        
._73	ld	l,[ix+#mob.Xspeed.lo]
	ld	h,[ix+#mob.Xspeed.hi]
	bit	7,[ix+#mob.Xdirection]
	ret	nz
	ld	de,$0301
	and	a
	sbc	hl,de
	ret	c
	ld	l,[ix+#mob.Xspeed.hi]
	ld	h,[ix+#mob.Xdirection]
	add	hl,hl
	ld	a,l
	cpl	
	ld	l,a
	ld	a,h
	cpl	
	ld	h,a
	inc	hl
	ld	[ix+#mob.Yspeed.lo],$00
	ld	[ix+#mob.Yspeed.hi],l
	ld	[ix+#mob.Ydirection],h
        
	ld	a,$05
	rst	:rst_playSFX
        
	ret

        `====================================================================[$550F]===
        `referenced by table at `_58e5` - index $03

INDEX   ._550f
        ld	a,[ix+#mob.X.lo]
	add	a,$0c
	and	$1f
	cp	$10
	ret	c
        
	ld	[ix+#mob.Xspeed.lo],$00
	ld	[ix+#mob.Xspeed.hi],$F8
	ld	[ix+#mob.Xdirection],$FF
	set	1,[ix+#mob.flags]
	
        ld	a,$04
	rst	:rst_playSFX
	
        ret
        
        `====================================================================[$552D]===
        `referenced by table at `_58e5` - index $04

INDEX   ._552d 
        ld	a,[ix+#mob.X.lo]
	add	a,$0c
	and	$1f
	cp	$10
	ret	c
        
	bit	7,[ix+#mob.flags]
	ret	z
        
	ld	a,[$.D2B9]
	and	$80
	ret	nz
        
	res	6,[iy+#vars.flags6]
	ld	[ix+#mob.Yspeed.lo],$00
	ld	[ix+#mob.Yspeed.hi],$F4
	ld	[ix+#mob.Ydirection],$FF
	
        ld	a,$04
	rst	:rst_playSFX
	
        ret

        `====================================================================[$5556]===
        `referenced by table at `_58e5` - index $05
        
INDEX   ._5556
        ld	a,[ix+#mob.X.lo]
	add	a,$0c
	and	$1f
	cp	$10
	ret	nc
        
	res	6,[iy+#vars.flags6]
	ld	[ix+#mob.Xspeed.lo],$00
	ld	[ix+#mob.Xspeed.hi],$08
	ld	[ix+#mob.Xdirection],$00
	res	1,[ix+#mob.flags]
        
	ld	a,$04
	rst	:rst_playSFX
	
        ret

        `====================================================================[$5578]===
        `referenced by table at `_58e5` - index $06

INDEX   ._5578
        bit	7,[ix+#mob.flags]
	ret	z
        
	ld	hl,[$.SONIC.Xsubpixel]
	ld	a,[$.SONIC.X.hi]
	ld	de,$fe80
	add	hl,de
	adc	a,$ff
	ld	[$.SONIC.Xsubpixel],hl
	ld	[$.SONIC.X.hi],a
	ret

        `====================================================================[$5590]===
        `referenced by table at `_58e5` - index $07
        
INDEX   ._5590
        bit	7,[ix+#mob.flags]
	ret	z
        
	ld	hl,[$.SONIC.Xsubpixel]
	ld	a,[$.SONIC.X.hi]
	ld	de,$0200
	add	hl,de
	adc	a,$00
	ld	[$.SONIC.Xsubpixel],hl
	ld	[$.SONIC.X.hi],a
	ret

        `====================================================================[$55A8]===
        `referenced by table at `_58e5` - index $08

INDEX   ._55a8
        bit	4,[ix+#mob.flags]
	jr	nz,._74
        
	ld	a,$12
	rst	:rst_playSFX
        
._74	set	4,[ix+#mob.flags]
	ret

        `====================================================================[$55B6]===
        `referenced by table at `_58e5` - index $09
        
INDEX   ._55b6
        ld	a,[ix+#mob.X.lo]
	add	a,$0c
	and	$1f
	cp	$08
	ret	c
        
	cp	$18
	ret	nc
        
	bit	7,[ix+#mob.flags]
	ret	z
        
	ld	a,[$.D2B9]
	and	$80
	ret	nz
        
	res	6,[iy+#vars.flags6]
	ld	[ix+#mob.Yspeed.lo],$00
	ld	[ix+#mob.Yspeed.hi],$f4
	ld	[ix+#mob.Ydirection],$ff
	
        ld	a,$04
	rst	:rst_playSFX
	
        ret

        `====================================================================[$55E2]===
        `referenced by table at `_58e5` - index $0A

INDEX   ._55e2
        bit	7,[ix+#mob.Ydirection]
	ret	nz
        
	ld	a,$05
	rst	:rst_playSFX
	
        ret

        `====================================================================[$55EB]===
        `referenced by table at `_58e5` - index $0B
        
INDEX   ._55eb
        bit	4,[iy+#vars.flags6]
	ret	nz
        
	ld	a,[$.SONIC.X]
	add	a,$0c
	and	$1f
	cp	$08
	ret	c
        
	cp	$18
	ret	nc
        
	ld	hl,[$.SONIC.X]
	ld	bc,$000c
	add	hl,bc
	ld	a,l
	add	a,a
	rl	h
	add	a,a
	rl	h
	add	a,a
	rl	h
	ld	e,h
	ld	hl,[$.SONIC.Y]
	ld	bc,$0010
	add	hl,bc
	ld	a,l
	add	a,a
	rl	h
	add	a,a
	rl	h
	add	a,a
	rl	h
	ld	d,h
	ld	hl,._5643
	ld	b,$05
	
._75	ld	a,[hl]
	inc	hl
	cp	e
	jr	nz,._76
	ld	a,[hl]
	cp	d
	jr	nz,._76
	inc	hl
	ld	[$.D2D5],hl
	ld	a,$50
	ld	[$.D28A],a
        
	ld	a,$06
	rst	:rst_playSFX
	ret

._76	inc	hl
	inc	hl
	inc	hl
	inc	hl
	djnz	._75
	
	ret

._5643	BYTE    $34 $3C $34 $2F $00 $19 $3A $19 $04 $00 $0E $3A $00 $00 $16 $1B
	BYTE    $32 $00 $00 $17 $2F $0C $00 $00 $FF

        `====================================================================[$565C]===
        `referenced by table at `_58e5` - index $0C

INDEX   ._565c
        ld	hl,[$.SONIC.Xspeed]
	ld	a,[$.SONIC.Xdirection]
	ld	de,$FFF8
	add	hl,de
	adc	a,$FF
	ld	[$.SONIC.Xspeed],hl
	ld	[$.SONIC.Xdirection],a
	bit	4,[ix+#mob.flags]
	jr	nz,._77
        
	ld	a,$12
	rst	:rst_playSFX
        
._77	set	4,[ix+#mob.flags]
	ret

        `====================================================================[$567C]===
        `referenced by table at `_58e5` - index $0D

INDEX   ._567c
        xor	a;zero			        `set A to 0
	ld	hl,$0005
	ld	[$.SONIC.Xspeed.lo],a;zero
	ld	[$.SONIC.Xspeed.hi],hl
	res	1,[ix+#mob.flags]
._568a	ld	a,$06
	ld	[$.D28C],a

        `--------------------------------------------------------------------[$568F]---

._568f  ld	a,[iy+#vars.joypad]
	or	$0f
	ld	[iy+#vars.joypad],a
	ld	hl,$0004
	ld	[$.SONIC.Yspeed.hi],hl
	res	0,[ix+#mob.flags]
	res	2,[ix+#mob.flags]
	ret

        `====================================================================[$56A6]===
        `referenced by table at `_58e5` - index $0E

INDEX   ._56a6
        xor	a;zero
	ld	hl,$0006
	ld	[$.SONIC.Xspeed.lo],a;zero
	ld	[$.SONIC.Xspeed.hi],hl
	res	1,[ix+#mob.flags]
	jr	._568a

        `====================================================================[$56B6]===
        `referenced by table at `_58e5` - index $0F
        
INDEX   ._56b6
        xor	a;zero
	ld	hl,$fffb
	ld	[$.SONIC.Xspeed.lo],a;zero
	ld	[$.SONIC.Xspeed.hi],hl
	set	1,[ix+#mob.flags]
	jr	._568a

        `====================================================================[$56C6]===
        `referenced by table at `_58e5` - index $10
        
INDEX   ._56c6
        xor	a;zero
	ld	hl,$FFFA
	ld	[$.SONIC.Xspeed.lo],a;zero
	ld	[$.SONIC.Xspeed.hi],hl
	set	1,[ix+#mob.flags]
	jr	._568a
	
        `====================================================================[$56D6]===
        `referenced by table at `_58e5` - index $11
        
INDEX   ._56d6
        ld	a,[$.D2E1]
	cp	$08
	ret	nc
        
	call	._5727
	ld	de,$0001
	ld	hl,[$.SONIC.Yspeed]
	ld	a,l
	cpl	
	ld	l,a
	ld	a,h
	cpl	
	ld	h,a
	ld	a,[$.SONIC.Ydirection]
	cpl	
	add	hl,de
	adc	a,$00
	and	a
	jp	p,._78
        
	ld	de,$ffc8
	add	hl,de
	adc	a,$ff
        
._78	ld	[$.SONIC.Yspeed],hl
	ld	[$.SONIC.Ydirection],a
	ld	bc,$000c
	ld	hl,[$.SONIC.X]
	add	hl,bc
	ld	a,l
	and	$e0
	ld	l,a
	ld	[$.D2E2],hl
	ld	bc,$0010
	ld	hl,[$.SONIC.Y]
	add	hl,bc
	ld	a,l
	and	$e0
	ld	l,a
	ld	[$.D2E4],hl
	ld	a,$10
	ld	[$.D2E1],a
        
	ld	a,$07
	rst	:rst_playSFX
	
        ret

        `--------------------------------------------------------------------[$5727]---
        `called by functions referenced by `_58e5`

INDEX   ._5727
        ld	hl,[$.SONIC.Xspeed]
	ld	a,[$.SONIC.Xdirection]
	ld	c,a
	and	$80
	ld	b,a
	ld	a,[$.SONIC.X]
	add	a,$0c
	and	$1f
	sub	$10
	and	$80
	cp	b
	jr	z,._79
	ld	a,l
	cpl	
	ld	l,a
	ld	a,h
	cpl	
	ld	h,a
	ld	a,c
	cpl	
	ld	c,a
._79	ld	de,$0001
	ld	a,c
	add	hl,de
	adc	a,$00
	ld	e,l
	ld	d,h
	ld	c,a
	sra	c
	rr	d
	rr	e
	add	hl,de
	adc	a,c
	ld	[$.SONIC.Xspeed],hl
	ld	[$.SONIC.Xdirection],a
	ret

        `====================================================================[$5761]===
        `referenced by table at `_58e5` - index $12
        
INDEX   ._5761
        ld	[ix+#mob.Yspeed.lo],$00
	ld	[ix+#mob.Yspeed.hi],$f6
	ld	[ix+#mob.Ydirection],$ff
        
	ld	a,$04
	rst	:rst_playSFX
	
        ret

        `====================================================================[$5771]===
        `referenced by table at `_58e5` - index $13
        
INDEX   ._5771
        ld	[ix+#mob.Yspeed.lo],$00
	ld	[ix+#mob.Yspeed.hi],$F4
	ld	[ix+#mob.Ydirection],$FF
        
	ld	a,$04
	rst	:rst_playSFX
	
        ret

        `====================================================================[$5781]===
        `referenced by table at `_58e5` - index $14
        
INDEX   ._5781
        ld	[ix+#mob.Yspeed.lo],$00
	ld	[ix+#mob.Yspeed.hi],$F2
	ld	[ix+#mob.Ydirection],$FF
        
	ld	a,$04
	rst	:rst_playSFX
	
        ret

        `====================================================================[$5791]===
        `referenced by table at `_58e5` - index $15
        
INDEX   ._5791
        ld	a,[$.D2B1]
	and	a
	ret	nz
        
	ld	de,$0001
	ld	hl,[$.SONIC.Xspeed]
	ld	a,l
	cpl	
	ld	l,a
	ld	a,h
	cpl	
	ld	h,a
	ld	a,[$.SONIC.Xdirection]
	cpl	
	add	hl,de
	adc	a,$00
	ld	de,$ff00
	ld	c,$ff
	jp	m,._80
        
	ld	de,$0100
	ld	c,$00
._80	add	hl,de
	adc	a,c
	ld	[$.SONIC.Xspeed],hl
	ld	[$.SONIC.Xdirection],a
._57be	ld	hl,$.D2B1
	ld	[hl],$04
	inc	hl
	ld	[hl],$0e
	inc	hl
	ld	[hl],$3f
        
	ld	a,$07
	rst	:rst_playSFX
	
        ret

        `====================================================================[$57CD]===
        `referenced by table at `_58e5` - index $16
        
INDEX   ._57cd
        call	._5727
	ld	de,$0001
	ld	hl,[$.SONIC.Yspeed]
	ld	a,l
	cpl	
	ld	l,a
	ld	a,h
	cpl	
	ld	h,a
	ld	a,[$.SONIC.Ydirection]
	cpl	
	add	hl,de
	adc	a,$00
	and	a
	jp	p,._81
        
	ld	de,$ffc8
	add	hl,de
	adc	a,$ff
._81	ld	[$.SONIC.Yspeed],hl
	ld	[$.SONIC.Ydirection],a
	jp	._57be

	`====================================================================[$57F6]===
        `referenced by table at `_58e5` - index $17
        
INDEX   ._57f6
        ld	hl,[$.D2E9]
	ld	de,$0082
	and	a
	sbc	hl,de
	ret	c
	bit	0,[iy+#vars.scrollRingFlags]
	jp	z,:_35fd
	ret

        `====================================================================[$5808]===
        `referenced by table at `_58e5` - index $18
        
INDEX   ._5808
        ld	a,[$.SONIC.flags]
	rlca	
	ret	nc
        
	ld	hl,[$.SONIC.X]
	ld	bc,$000C
	add	hl,bc
	ld	a,l
	and	$1F
	cp	$10
	jr	nc,._5858
        
._581b	ld	hl,[$.SONIC.X]
	ld	bc,$000c
	add	hl,bc
	ld	a,l
	and	$e0
	ld	c,a
	ld	b,h
	ld	hl,[$.SONIC.Y]
	ld	de,$0010
	add	hl,de
	ld	a,l
	and	$e0
	ld	e,a
	ld	d,h
	call	._5893
	ret	c
        
	ld	bc,$000c
	ld	de,$0010
	call	:getFloorLayoutRAMAddressForMob
	ld	c,$00
	ld	a,[hl]
	cp	$8a
	jr	z,._5849
	ld	c,$89
._5849	ld	[hl],c
	ret

        `====================================================================[$584B]===
        `referenced by table at `_58e5` - index $19
        
INDEX   ._584b
        ld	hl,[$.SONIC.X]
	ld	bc,$000c
	add	hl,bc
	ld	a,l
	and	$1f
	cp	$10
	ret	c
        
._5858	ld	a,l
	and	$e0
	add	a,$10
	ld	c,a
	ld	b,h
	ld	hl,[$.SONIC.Y]
	ld	de,$0010
	add	hl,de
	ld	a,l
	and	$e0
	ld	e,a
	ld	d,h
	call	._5893
	ret	c
        
	ld	bc,$000c
	ld	de,$0010
	call	:getFloorLayoutRAMAddressForMob
	ld	c,$00
	ld	a,[hl]
	cp	$89
	jr	z,._5849
	ld	c,$8a
	ld	[hl],c
	ret

        `====================================================================[$5883]===
        `referenced by table at `_58e5` - index $1A

INDEX   ._5883
        ld	hl,[$.SONIC.X]
	ld	bc,$000c
	add	hl,bc
	ld	a,l
	and	$1f
	cp	$10
	ret	nc
	jp	._581b

        `--------------------------------------------------------------------[$5893]---
        `called by functions referenced by `58e5`

._5893  push	bc, de
	call	:findEmptyMob
	
        pop	de, bc
	ret	c
        
	push	ix, hl
	pop	ix
        
	xor	a;zero			        `set A to 0
	ld	[ix+#mob.type],$2E	        `falling bridge piece
	ld	[ix+#mob.Xsubpixel],a;zero
	ld	[ix+#mob.X.lo],c
	ld	[ix+#mob.X.hi],b
	ld	[ix+#mob.Ysubpixel],a;zero
	ld	[ix+#mob.Y.lo],e
	ld	[ix+#mob.Y.hi],d
	ld	[ix+#mob.Xspeed.lo],a;zero
	ld	[ix+#mob.Xspeed.hi],a;zerp
	ld	[ix+#mob.Xdirection],a;zero
	ld	[ix+#mob.Yspeed.lo],a;zero
	ld	[ix+#mob.Yspeed.hi],a;zero
	ld	[ix+#mob.Ydirection],a;zero
	ld	[ix+#mob.flags],a;zero
	
        pop	ix
	and	a;zero
	ret

        `====================================================================[$58D0]===
        `referenced by table at `_58e5` - index $1B
        
INDEX   ._58d0
        bit	7,[ix+#mob.flags]
	ret	z
        
	ld	hl,[$.SONIC.Y]
	ld	de,[$.CAMERA_Y]
	and	a
	sbc	hl,de
	ret	nc
        
        `clear joypad input
	ld	[iy+#vars.joypad],$FF
	ret
        
	`====================================================================[$58E5]===
        `lookup table to the functions above
         `(these probably handle the different solidity values)

._58e5  WORD    ._54bc, ._54c6, ._54ce, ._550f, ._552d, ._5556, ._5578, ._5590
	WORD    ._55a8, ._55b6, ._55e2, ._55eb, ._565c, ._567c, ._56a6, ._56b6
	WORD    ._56c6, ._56d6, ._5761, ._5771, ._5781, ._5791, ._57cd, ._57f6
	WORD    ._5808, ._584b, ._5883, ._58d0

        `--------------------------------------------------------------------[$591D]---
        `sprite layouts

._591d	`Sonic's sprite layout
	BYTE    $B4 $B6 $B8 $FF $FF $FF
	BYTE    $BA $BC $BE $FF $FF $FF
	BYTE    $FF $FF
._592b
	BYTE    $B8 $B6 $B4 $FF $FF $FF
	BYTE    $BE $BC $BA $FF $FF $FF
	BYTE    $FF $FF
._5939
	BYTE    $B4 $B6 $B8 $FF $FF $FF
	BYTE    $BA $BC $BE $FF $FF $FF
	BYTE    $98 $9A $FF $FF $FF $FF
._594b
	BYTE    $B4 $B6 $B8 $FF $FF $FF
	BYTE    $BA $BC $BE $FF $FF $FF
	BYTE    $FE $9C $9E $FF $FF $FF
        
._595d	`unknown data
	BYTE    $00 $00 $00 $00 $00 $00 $00 $00
._5965	`unknown data
	BYTE    $99 $59 $99 $59 $CB $59 $DD $59 $DF $59 $E2 $59 $E5 $59 $FB $59
	BYTE    $FE $59 $01 $5A $53 $5A $65 $5A $68 $5A $6B $5A $AF $5A $C5 $5A
	BYTE    $CC $5A $D0 $5A $DE $5A $E1 $5A $E4 $5A $E7 $5A $EA $5A $00 $5B
	BYTE    $03 $5B $06 $5B $00 $00 $00 $00 $00 $00 $00 $00 $01 $01 $01 $01
	BYTE    $01 $01 $01 $01 $02 $02 $02 $02 $02 $02 $02 $02 $03 $03 $03 $03
	BYTE    $03 $03 $03 $03 $04 $04 $04 $04 $04 $04 $04 $04 $05 $05 $05 $05
	BYTE    $05 $05 $05 $05 $FF $00 $0D $0D $0D $0D $0E $0E $0E $0E $0F $0F
	BYTE    $0F $0F $10 $10 $10 $10 $FF $00 $FF $00 $13 $FF $00 $06 $FF $00
	BYTE    $08 $08 $08 $08 $09 $09 $09 $09 $0A $0A $0A $0A $0B $0B $0B $0B
	BYTE    $0C $0C $0C $0C $FF $00 $07 $FF $00 $00 $FF $00 $0C $0C $0C $0C
	BYTE    $0C $0C $0C $0C $0C $0C $0C $0C $0C $0C $0C $0C $08 $08 $08 $08
	BYTE    $08 $08 $08 $08 $08 $08 $08 $08 $08 $08 $08 $08 $09 $09 $09 $09
	BYTE    $09 $09 $09 $09 $09 $09 $09 $09 $09 $09 $09 $09 $0A $0A $0A $0A
	BYTE    $0A $0A $0A $0A $0A $0A $0A $0A $0A $0A $0A $0A $0B $0B $0B $0B
	BYTE    $0B $0B $0B $0B $0B $0B $0B $0B $0B $0B $0B $0B $FF $00 $13 $13
	BYTE    $13 $13 $13 $13 $13 $13 $25 $25 $25 $25 $25 $25 $25 $25 $FF $00
	BYTE    $11 $FF $00 $14 $FF $00 $16 $16 $16 $16 $16 $16 $16 $16 $16 $16
	BYTE    $16 $16 $16 $16 $16 $16 $15 $15 $15 $15 $15 $15 $15 $15 $15 $15
	BYTE    $15 $15 $15 $15 $15 $15 $15 $15 $16 $16 $16 $16 $16 $16 $16 $16
	BYTE    $16 $16 $16 $16 $16 $16 $16 $16 $17 $17 $17 $17 $17 $17 $17 $17
	BYTE    $17 $17 $17 $17 $17 $17 $17 $17 $FF $22 $19 $19 $19 $19 $1A $1A
	BYTE    $1B $1B $1C $1C $1D $1D $1E $1E $1F $1F $20 $20 $21 $21 $FF $12
	BYTE    $0C $08 $09 $0A $0B $FF $00 $12 $12 $FF $00 $12 $12 $12 $12 $12
	BYTE    $12 $24 $24 $24 $24 $24 $24 $FF $00 $00 $FF $00 $26 $FF $00 $22
	BYTE    $FF $00 $23 $FF $00 $21 $21 $20 $20 $1F $1F $1E $1E $1D $1D $1C
	BYTE    $1C $1B $1B $1A $1A $19 $19 $19 $19 $FF $12 $19 $FF $00 $1A $FF
	BYTE    $00 $1B $FF $00
}