`` Sonic 1 Master System Disassembly
   created by Kroc Camen <kroc@camendesign.com>
   for MaSS1VE: The Master System Sonic 1 Visual Editor <github.com/Kroc/MaSS1VE>
   ================================================================================= ``
`` please use tab stops at 8 and a line width of 88 chars, thanks
   ================================================================================= ``
``
			W    A    R    N    I    N    G    !
	
	Here be dragons! This disassembly is in progress, expect constant
	changes as well as future planned improvements:
	
	*	split up into categorised files
	
	*	fully commented and described program flow
	
	*	portable data

   --------------------------------------------------------------------------------- ``
`` This source code is given to the public domain:
   
   whilst "SEGA" and "Sonic" are registered trademarks of SEGA Enterprises, Ltd.,
   this is not their source code (I haven't broken into SEGA's offices ¬__¬), so not
   their copyright. Neither does this contain any byte-for-byte data of the original
   ROM (this is all ASCII codes, even the hex data parts). the fact that this text
   file can be processed with an algorithm and produces a file that is the same as
   the original ROM is also not a copyright violation -- SEGA don't own a patent on
   the compiling algorithm

   --------------------------------------------------------------------------------- ``
`` this disassembly was made possible by earlier documentation provided by
   David Declerk, ValleyBell, Penta Penguin and Ravenfreak
   
   --------------------------------------------------------------------------------- ``
`` this disassembly was made by using these tools:

:: SMSExamine: <smspower.org/Development/SMSExamine>
	this excellent tool disassembles much of the ROM by effectively 'running'
	the code to determine what parts are code and what parts are data.
	this saved a very large amount of effort, but due to the dynamic and complex
	nature of code, it didn't get all of it right, therefore I used:
 
:: dz80: <inkland.org.uk/dz80>
	to do a byte-for-byte disassembly to fill in the blanks (this had to all be
	manually labelled!). that was largely wasted time as I later got help from
	the author of:
 
:: Emulicious: <emulicious.net>
	which was able to provide a far superior disassembly that filled in all the
	gaps through a specific configuration file provided kindly by the author to
	assist me
 
:: WLA DX <villehelin.com/wla.html>
	I used this assembler to get things working, and after having explored the
        syntax and the task at hand, I opted to write my own assembler:

:: OZ80MANDIAS <github.com/Kroc/OZ80MANDIAS>
        A brand-new SMS-specific assembler with a new syntax designed for writing
        clean, flexible code and data
        
   
``


`SECTION ::interrupts    BANK 0 SLOT 0
`SECTION ::main          BANK 0 SLOT 0
`SECTION ::objects       BANK 1, 2 SLOT 1, 2
`SECTION ::sound         BANK 3, SLOT 2
   
``
IF EXISTS "ROM.sms" {
	`once all large data is inserted with `INCLUDE BINARY`, this won't be needed
	FILL BINARY "ROM.sms"
} ELSE {
	ECHO "Please provide a Sonic 1 ROM "
	ECHO "named 'ROM.sms' to fill in the data banks\n"
	FAIL
}
``

`hardware constants:
`======================================================================================
``the banking of the cartridge ROM into the slots of the Z80 address space is handled
  by the mapper chip. for standard SEGA mappers, writing to $FFFC configures the
  mapper and $FFFD/E/F sets the ROM bank number to page into the relevant memory slot.
  for more details, see http://www.smspower.org/Development/Mappers
`` 
VAR #SMS_PAGE_RAM		$FFFC	`RAM select register
VAR #SMS_PAGE_0			$FFFD	`Page 0 ROM Bank
VAR #SMS_PAGE_1			$FFFE	`Page 1 ROM Bank
VAR #SMS_PAGE_2			$FFFF	`Page 2 ROM Bank

`VDP:
`--------------------------------------------------------------------------------------
``the Video Display Processor in the Master System handles the graphics and sprites
  stored in video RAM ("VRAM"), composites the display and outputs it to the display
``
VAR #SMS_CURRENT_SCANLINE 	$7E	`read current vertical scanline from 0 to 191
VAR #SMS_VDP_DATA		$BE	`graphics data port
VAR #SMS_VDP_CONTROL		$BF	`graphics control port

``VDP registers are written to by sending first the data byte, and then the 4-bit
  register number with bit 7 set. for more details, see
  http://www.smspower.org/Development/VDPRegisters
``
VAR #SMS_VDP_REGISTER_WRITE	%10000000
VAR #SMS_VDP_REGISTER_0		#SMS_VDP_REGISTER_WRITE | 0
VAR #SMS_VDP_REGISTER_1		#SMS_VDP_REGISTER_WRITE | 1
VAR #SMS_VDP_REGISTER_2		#SMS_VDP_REGISTER_WRITE | 2
VAR #SMS_VDP_REGISTER_5		#SMS_VDP_REGISTER_WRITE | 5
VAR #SMS_VDP_REGISTER_6		#SMS_VDP_REGISTER_WRITE | 6
VAR #SMS_VDP_REGISTER_7		#SMS_VDP_REGISTER_WRITE | 7
VAR #SMS_VDP_REGISTER_8		#SMS_VDP_REGISTER_WRITE | 8
VAR #SMS_VDP_REGISTER_9		#SMS_VDP_REGISTER_WRITE | 9
VAR #SMS_VDP_REGISTER_10	#SMS_VDP_REGISTER_WRITE | 10

VAR #SMS_VDP_SCREENNAMETABLE	$3800

`how many blocks (32x32px) fit in the screen height
VAR #SMS_SCREENHEIGHT_PX	192
VAR #SMS_SCREENHEIGHT_BLOCKS	#SMS_SCREENHEIGHT_PX / 32

`--------------------------------------------------------------------------------------
VAR #SMS_SOUND_PORT		$7F	`write-only port to send data to sound chip

VAR #SMS_JOYPAD_1		$DC
VAR #SMS_JOYPAD_2		$DD

`======================================================================================

INCLUDE "ram.oz80"

`======================================================================================

INCLUDE "interrupts.oz80"

INCLUDE "main.oz80"

INCLUDE "screens\map.oz80"

INCLUDE "objects\objects.oz80"

`======================================================================================
`music code and song data

BANK 3 SLOT 1

INCLUDE "SOUND\sound_driver.asm"
INCLUDE "SOUND\music.asm"

`we might be able to set a background repeating text like this so that we don't have
 `to specify precise gap-filling like this
AT $7FB1 - $4000
DATA "Master System & Game Gear Version.  "
DATA "'1991 (C)Ancient. (BANK0-4)", $A2
DATA "SONIC THE HEDGE"

`======================================================================================
`block mappings

BANK 4

`[$10000]
:S1_BlockMappings

:S1_BlockMappings_GreenHill
INCLUDE BINARY "ROM.sms" START $10000 LENGTH 2944

:S1_BlockMappings_Bridge
INCLUDE BINARY "ROM.sms" START $10B80 LENGTH 2304

:S1_BlockMappings_Jungle
INCLUDE BINARY "ROM.sms" START $11480 LENGTH 2560

:S1_BlockMappings_Labyrinth
INCLUDE BINARY "ROM.sms" START $11E80 LENGTH 2816

:S1_BlockMappings_ScrapBrain
INCLUDE BINARY "ROM.sms" START $12980 LENGTH 3072

:S1_BlockMappings_SkyBaseExterior
`INCLUDE BINARY "ROM.sms" SKIP $13580 READ 3456
INCLUDE BINARY "ROM.sms" START $13580 LENGTH ($14000 - $13580)
BANK 5
AT $0000
INCLUDE BINARY "ROM.sms" START $14000 LENGTH 3456 - ($14000 - $13580)

:S1_BlockMappings_SkyBaseInterior
INCLUDE BINARY "ROM.sms" START $14300 LENGTH 1664

:S1_BlockMappings_SpecialStage
INCLUDE BINARY "ROM.sms" START $14980 LENGTH 2048

`======================================================================================
`"blinking items"
`(need to properly break these down)

`[$15180]
INCLUDE BINARY "ROM.sms" START $15180 LENGTH 1024

`======================================================================================
`level headers:

BANK 5

`[$15580]
:S1_LevelHeader_Pointers

`[$155CA]
AT $155CA - $14000
