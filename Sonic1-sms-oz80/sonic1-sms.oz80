`` Sonic 1 Master System Disassembly
   created by Kroc Camen <kroc@camendesign.com>
   for MaSS1VE: The Master System Sonic 1 Visual Editor <github.com/Kroc/MaSS1VE>
   ================================================================================= ``
`` please use tab stops at 8 and a line width of 88 chars, thanks
   ================================================================================= ``
``
			W    A    R    N    I    N    G    !
	
	Here be dragons! This disassembly is in progress, expect constant
	changes as well as future planned improvements:
	
	*	split up into categorised files
	
	*	fully commented and described program flow
	
	*	portable data

   --------------------------------------------------------------------------------- ``
`` This source code is given to the public domain:
   
   whilst "SEGA" and "Sonic" are registered trademarks of Sega Enterprises, Ltd.,
   this is not their source code (I haven't broken into SEGA's offices ¬__¬), so not
   their copyright. Neither does this contain any byte-for-byte data of the original
   ROM (this is all ASCII codes, even the hex data parts). the fact that this text
   file can be processed with an algorithm and produces a file that is the same as
   the original ROM is also not a copyright violation -- SEGA don't own a patent on
   the compiling algorithm

   --------------------------------------------------------------------------------- ``
`` this disassembly was made by using these tools:

:: SMSExamine: <smspower.org/Development/SMSExamine>
	this excellent tool disassembles much of the ROM by effectively 'running'
	the code to determine what parts are code and what parts are data.
	this saved a very large amount of effort, but due to the dynamic and complex
	nature of code, it didn't get all of it right, therefore I used:
 
:: dz80: <inkland.org.uk/dz80>
	to do a byte-for-byte disassembly to fill in the blanks (this had to all be
	manually labelled!). that was largely wasted time as I later got help from
	the author of:
 
:: Emulicious: <emulicious.net>
	which was able to provide a far superior disassembly that filled in all the
	gaps through a specific configuration file provided kindly by the author to
	assist me
 
:: WLA DX <villehelin.com/wla.html>
	I was intending to write my own Z80 assembler (in VB6!), but I have found --
	after some struggling to learn it -- that WLA DX will do an excellent job

   this disassembly was made possible by earlier documentation provided by
   David Declerk, ValleyBell, Penta Penguin and Ravenfreak ``

``
IF EXISTS "ROM.sms" {
	`once all large data is inserted with `INCLUDE BINARY`, this won't be needed
	FILL BINARY "ROM.sms"
} ELSE {
	ECHO "Please provide a Sonic 1 ROM "
	ECHO "named 'ROM.sms' to fill in the data banks\n"
	FAIL
}
``


`experimental configuration:
`======================================================================================

`` the Master System has a typical screen image height of 192px.
   enabling the definition below will expand this by 32px to 224px
   WARNING:
   - this only works on the Master System II and not all emulators
   - the feature is incomplete and breaks the game
   - there's not enough VRAM for the Sonic sprite
``
`DEF #S1_CONFIG_BIGGERSCREEN

`keep the screen height handy, it'll be used in a lot of places
`IF DEF #S1_CONFIG_BIGGERSCREEN {
`	DEF #SMS_SCREENHEIGHT_PX	224
`} ELSE {
	DEF #SMS_SCREENHEIGHT_PX	192
`}
`how many blocks (32x32px) fit in the screen height
DEF #SMS_SCREENHEIGHT_BLOCKS	#SMS_SCREENHEIGHT_PX / 32


`hardware constants:
`======================================================================================
`the banking of the cartridge ROM into the slots of the Z80 address space is handled
 `by the mapper chip. for standard Sega mappers, writing to $FFFC configures the
 `mapper and $FFFD/E/F sets the ROM bank number to page into the relevant memory slot.
 `for more details, see http://www.smspower.org/Development/Mappers
 
DEF #SMS_PAGE_RAM		$FFFC	`RAM select register
DEF #SMS_PAGE_0			$FFFD	`Page 0 ROM Bank
DEF #SMS_PAGE_1			$FFFE	`Page 1 ROM Bank
DEF #SMS_PAGE_2			$FFFF	`Page 2 ROM Bank

`VDP:
`--------------------------------------------------------------------------------------
`the Video Display Processor in the Master System handles the graphics and sprites
 `stored in video RAM ("VRAM"), composites the display and outputs it to the TV
 
DEF #SMS_CURRENT_SCANLINE 	$7E	`current vertical scanline from 0 to 191
DEF #SMS_VDP_DATA		$BE	`graphics data port
DEF #SMS_VDP_CONTROL		$BF	`graphics control port

`VDP registers are written to by sending first the data byte, and then the 4-bit
 `register number with bit 7 set. for more details, see
 `http://www.smspower.org/Development/VDPRegisters

DEF #SMS_VDP_REGISTER_WRITE	%10000000
DEF #SMS_VDP_REGISTER_0		#SMS_VDP_REGISTER_WRITE | 0
DEF #SMS_VDP_REGISTER_1		#SMS_VDP_REGISTER_WRITE | 1
DEF #SMS_VDP_REGISTER_2		#SMS_VDP_REGISTER_WRITE | 2
DEF #SMS_VDP_REGISTER_5		#SMS_VDP_REGISTER_WRITE | 5
DEF #SMS_VDP_REGISTER_6		#SMS_VDP_REGISTER_WRITE | 6
DEF #SMS_VDP_REGISTER_7		#SMS_VDP_REGISTER_WRITE | 7
DEF #SMS_VDP_REGISTER_8		#SMS_VDP_REGISTER_WRITE | 8
DEF #SMS_VDP_REGISTER_9		#SMS_VDP_REGISTER_WRITE | 9
DEF #SMS_VDP_REGISTER_10	#SMS_VDP_REGISTER_WRITE | 10

`location of the screen name table (layout of the tiles on screen) in VRAM
`IF DEF #S1_CONFIG_BIGGERSCREEN {
`	DEF #SMS_VDP_SCREENNAMETABLE	$3700
`} ELSE {
	DEF #SMS_VDP_SCREENNAMETABLE	$3800
`}

`--------------------------------------------------------------------------------------
DEF #SMS_SOUND_PORT		$7F	`write-only port to send data to sound chip

DEF #SMS_JOYPAD_1		$DC
DEF #SMS_JOYPAD_2		$DD


`game variables:
`======================================================================================
`the programmers use the IY register as a shortcut to $D200
 `to access commonly used variables and flags
 
OBJECT #vars {				`$D200:
	
	`program flow control / loading flags?
	.flags0			AS BYTE	`IY+$00
	`bit 0 - `waitForInterrupt` will loop until the bit is set
	`bit 1 - unknown (set at level load)
	`bit 3 - flag to load palette on IRQ
	`bit 5 - unknown
	`bit 6 - set when the camera has moved left
	`bit 7 - set when the camera has moved up
	
	`this is used only as the comparison byte in `loadFloorLayout`
	.temp			AS BYTE	`IY+$01
	
	.flags2			AS BYTE	`IY+$02
	`bit 0 - unknown
	`bit 1 - unknown
	`bit 2 - unknown
	
	`value of joypad port 1 - the bits are 1 for unpressed and 0 for pressed
	.joypad			AS BYTE	`IY+$03
	`bit 0 - joypad 1 up
	`bit 1 - joypad 1 down
	`bit 2 - joypad 1 left
	`bit 3 - joypad 1 right
	`bit 4 - joypad button A
	`bit 5 - joypad button B
	
	`this does not appear referenced in any code
	.unused			AS BYTE	`IY+$04
	
	`taken from the level header, this controls screen scrolling and the
	 `presence of the "rings" count on the HUD
	.scrollRingFlags	AS BYTE	`IY+$05
	`bit 0 - unknown, but causes Sonic to immediately die
	`bit 1 - demo mode
	`bit 2 - ring count displayed in HUD, rings visible in the level
	`bit 3 - automatic scrolling to the right
	`bit 4 - automatic scrolling upwards
	`bit 5 - smooth scrolling
	`bit 6 - up and down wave scrolling
	`bit 7 - screen does not scroll down
	
	.flags6			AS BYTE	`IY+$06
	`bit 0 - unknown
	`bit 1 - unknown
	`bit 3 - unknown
	`bit 4 - unknown
	`bit 5 - unknown
	`bit 6 - unknown
	`bit 7 - level underwater flag (enables water line)
	
	`taken from the level header, this controls the presence of the time on
	 `the HUD and if the lightning effect is in use
	.timeLightningFlags	AS BYTE	`IY+$07
	`bit 0 - centers the time in the screen on special stages
	`bit 1 - enables the lightning effect
	`bit 4 - use the boss underwater palette (specially for Labyrinth Act 3)
	`bit 5 - time is displayed in the HUD
	`bit 6 - locks the screen, no scrolling
	
	`part of the level header -- always "0" for all levels, but unknown function
	.unknown0		AS BYTE	`IY+$08
	
	.flags9			AS BYTE	`IY+$09
	`bit 0 - unknown
	`bit 1 - enables interrupts during `decompressArt`
	
	.spriteUpdateCount	AS BYTE	`IY+$0A, number of sprites requiring updates
	.origScrollRingFlags	AS BYTE	`IY+$0B, copy made during level loading UNUSED
	.origFlags6		AS BYTE	`IY+$0C, copy made during level loading
}

`temporary variables:
`--------------------------------------------------------------------------------------

`these variables are reused throughout, some times for passing extra parameters to a
 `function and sometimes as extra working space within a function
DEF #RAM_TEMP1			$D20E
DEF #RAM_TEMP2			$D20F
DEF #RAM_TEMP3			$D210
DEF #RAM_TEMP4			$D212
DEF #RAM_TEMP5			$D213
DEF #RAM_TEMP6			$D214
DEF #RAM_TEMP7			$D215

`hardware caches:
`--------------------------------------------------------------------------------------

DEF #RAM_VDPREGISTER_0		$D218	`RAM cache of the VDP register 0
DEF #RAM_VDPREGISTER_1		$D219	`RAM cache of the VDP register 1

DEF #RAM_PAGE_1			$D235	`used to keep track of what bank is in page 1
DEF #RAM_PAGE_2			$D236	`used to keep track of what bank is in page 2

DEF #RAM_VDPSCROLL_HORIZONTAL	$D251
DEF #RAM_VDPSCROLL_VERTICAL	$D252

DEF #RAM_SPRITETABLE		$D000	`X/Y/I data for the 64 sprites

`--------------------------------------------------------------------------------------

DEF #RAM_CURRENT_LEVEL		$D23E

DEF #RAM_FLOORLAYOUT		$C000

`level dimensions / crop
DEF #RAM_LEVEL_FLOORWIDTH	$D238	`width of the floor layout in blocks
DEF #RAM_LEVEL_FLOORHEIGHT	$D23A	`height of the floor layout in blocks
DEF #RAM_LEVEL_LEFT		$D273
`prevents the level scrolling past this left-most point
 `(i.e. sets an effective right-hand limit to the level -- this + width of the screen)
DEF #RAM_LEVEL_RIGHT		$D275
DEF #RAM_LEVEL_TOP		$D277
DEF #RAM_LEVEL_BOTTOM		$D279

DEF #RAM_LEVEL_SOLIDITY		$D2D4

DEF #RAM_RINGS			$D2AA	`player's ring count
DEF #RAM_LIVES			$D246	`player's lives count
DEF #RAM_TIME			$D29F	`the level's time

` `loadPaletteOnInterrupt` and `loadPaletteFromInterrupt` use these to pass parameters
DEF #RAM_LOADPALETTE_ADDRESS	$D22B
DEF #RAM_LOADPALETTE_FLAGS	$D22F
` `loadPalette` use these to pass the addresses of the tile/sprite palettes to load
DEF #RAM_LOADPALETTE_TILE	$D230
DEF #RAM_LOADPALETTE_SPRITE	$D232

`a copy of the level music index is kept so that the music can be started again (?)
 `after other sound events like invincibility
DEF #RAM_LEVEL_MUSIC		$D2FC
`the previous song played is checked during level load to avoid re-initialising the
 `same song (for example, when teleporting in Scrap Brain)
DEF #RAM_PREVIOUS_MUSIC		$D2D2

`the address of where the cycle palette begins
DEF #RAM_CYCLEPALETTE_POINTER	$D2A8
`the current palette in the cycle palette being used
DEF #RAM_CYCLEPALETTE_INDEX	$D2A6
DEF #RAM_CYCLEPALETTE_SPEED	$D2A4

DEF #RAM_RASTERSPLIT_STEP	$D247
DEF #RAM_RASTERSPLIT_LINE	$D248
DEF #RAM_WATERLINE		$D2DB

DEF #RAM_SONIC_CURRENT_FRAME	$D28F
DEF #RAM_SONIC_PREVIOUS_FRAME	$D291

DEF #RAM_RING_CURRENT_FRAME	$D293
DEF #RAM_RING_PREVIOUS_FRAME	$D295

`a pointer to a position within a sprite table, consisting of three bytes each entry:
 `X-position, Y-position and sprite index number. this is used to set where the next
 `sprites will be created in the table, e.g. `processSpriteLayout`
DEF #RAM_SPRITETABLE_CURRENT	$D23C

DEF #RAM_CAMERA_X		$D25A
DEF #RAM_CAMERA_Y		$D25D

DEF #RAM_CAMERA_X_LEFT		$D26F	`used to check when the camera goes left
DEF #RAM_CAMERA_Y_UP		$D271	`used to check when the camera goes up

DEF #RAM_CAMERA_X_GOTO		$D27B	`a point to move the camera to - i.e. boss
DEF #RAM_CAMERA_Y_GOTO		$D27D

DEF #RAM_BLOCK_X		$D257	`number of blocks across the camera is
DEF #RAM_BLOCK_Y		$D258	`number of blocks down the camera is

`absolute address of the block mappings when in page 1 (i.e. $4000)
DEF #RAM_BLOCKMAPPINGS		$D24F

`the number of the hardware sprites "in use"
DEF #RAM_ACTIVESPRITECOUNT	$D2B4

`when the screen scrolls and new tiles need to be filled in, they are pulled from these
 `caches which have the necessary tiles already in horizontal/vertical order for speed
DEF #RAM_OVERSCROLLCACHE_HORZ	$D180
DEF #RAM_OVERSCROLLCACHE_VERT	$D100

DEF #RAM_PALETTE		$D3BC

DEF #RAM_FRAMECOUNT		$D223

`======================================================================================

INCLUDE "core.oz80"

INCLUDE "main.oz80"

INCLUDE "objects.oz80"

`======================================================================================
`music code and song data

BANK 3 SLOT 1

INCLUDE "SOUND\sound_driver.asm"
INCLUDE "SOUND\music.asm"

`we might be able to set a background repeating text like this so that we don't have
 `to specify precise gap-filling like this
AT $7FB1 - $4000
DATA "Master System & Game Gear Version.  "
DATA "'1991 (C)Ancient. (BANK0-4)", $A2
DATA "SONIC THE HEDGE"

`======================================================================================
`block mappings

BANK 4

`[$10000]
:S1_BlockMappings

:S1_BlockMappings_GreenHill
INCLUDE BINARY "ROM.sms" START $10000 LENGTH 2944

:S1_BlockMappings_Bridge
INCLUDE BINARY "ROM.sms" START $10B80 LENGTH 2304

:S1_BlockMappings_Jungle
INCLUDE BINARY "ROM.sms" START $11480 LENGTH 2560

:S1_BlockMappings_Labyrinth
INCLUDE BINARY "ROM.sms" START $11E80 LENGTH 2816

:S1_BlockMappings_ScrapBrain
INCLUDE BINARY "ROM.sms" START $12980 LENGTH 3072

:S1_BlockMappings_SkyBaseExterior
`INCLUDE BINARY "ROM.sms" SKIP $13580 READ 3456
INCLUDE BINARY "ROM.sms" START $13580 LENGTH ($14000 - $13580)
BANK 5
AT $0000
INCLUDE BINARY "ROM.sms" START $14000 LENGTH 3456 - ($14000 - $13580)

:S1_BlockMappings_SkyBaseInterior
INCLUDE BINARY "ROM.sms" START $14300 LENGTH 1664

:S1_BlockMappings_SpecialStage
INCLUDE BINARY "ROM.sms" START $14980 LENGTH 2048

`======================================================================================
`"blinking items"
`(need to properly break these down)

`[$15180]
INCLUDE BINARY "ROM.sms" START $15180 LENGTH 1024

`======================================================================================
`level headers:

BANK 5

`[$15580]
:S1_LevelHeader_Pointers

`[$155CA]
AT $155CA - $14000
